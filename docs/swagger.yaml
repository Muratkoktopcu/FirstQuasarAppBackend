basePath: /api
definitions:
  dto.LoginRequest:
    properties:
      email:
        example: alice@example.com
        type: string
      password:
        example: P@ssw0rd!
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      email:
        example: alice@example.com
        type: string
      fullName:
        example: Alice Doe
        type: string
      password:
        example: P@ssw0rd!
        type: string
    type: object
  dto.UserProfileResponse:
    properties:
      email:
        type: string
      fullName:
        type: string
      id:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: Quasar frontend'in kullandığı Go backend API dokümantasyonu.
  title: My API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Email + password ile giriş
      parameters:
      - description: Login payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Access token header’da, refresh HttpOnly cookie’de
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Login
      tags:
      - Auth
  /auth/logout:
    post:
      description: Refresh cookie’yi temizler (logout)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Logout
      tags:
      - Auth
  /auth/refresh:
    post:
      description: HttpOnly cookie’deki refresh token ile yeni access token üretir.
        (Opsiyonel rotation)
      produces:
      - application/json
      responses:
        "200":
          description: Access token header’da, refresh cookie opsiyonel yenilenir
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Refresh access token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Yeni kullanıcı kaydı (email, password, fullName)
      parameters:
      - description: Register payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Access token header’da, refresh HttpOnly cookie’de
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Register user
      tags:
      - Auth
  /health:
    get:
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Health check
      tags:
      - Health
  /profile:
    get:
      description: JWT ile doğrulanmış kullanıcının profilini döndürür
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserProfileResponse'
        "400":
          description: invalid user id
          schema:
            type: string
        "401":
          description: unauthorized
          schema:
            type: string
        "404":
          description: user not found
          schema:
            type: string
        "500":
          description: internal error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Kullanıcı profilini getir
      tags:
      - profile
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
